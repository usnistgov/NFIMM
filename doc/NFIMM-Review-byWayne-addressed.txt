FYI: The library builds on MacOS as well.

General
-------
------------------------------------------------------------------------------------------------------------------------
In the README.md file, change 'veritical' to 'vertical'.
bxb DONE (03Jul2023)
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
The build directory is placed under the doc directory in the Git repo.
Therefore, the instructions in build_commands.txt are incorrect. (You'd have
to run 'cmake ../../'), The fix is to move build to be under nfimm.

I recommend that the build directory be removed from the repo and the
build_commands.txt file be placed at the top level. The convention when using
cmake is to have the user create the build directory and run 'cmake ..' within
build. The build instructions are typically:
	mkdir build
	cd build
	cmake ..
bxb DONE- moved the build_commands.txt file (03Jul2023)
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
NIT: The build_commands.txt file uses 'NFIMM' in the example, but the Git repo
has 'nfimm' as the directory name.
bxb DONE replaced all NFIMM with nfimm (03Jul2023)
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
In several classes (BMP, FileHeader, etc.) you explicitly declare the
default constructors and define them to be empty. Comments:
	* If you declare another constructor, the compiler will not
	  declare the default for you, hence no need to define it with no code;
	* If you truly want to eliminate the possibility of a default
	  constructor, declare them as '= delete'.
	* In the cases where the class manages a pointer to some buffer, you
	  may want to declare the copy constructor and assignment operator
	  as '= delete'. However, copying may be allowed if your design is one
	  that allows multiple classes to READ from a shared buffer. If the
	  class writes to that buffer you could have corruption problems.

bxb DONE (05Jul2023)
Set all default constructors that are not meant to be used as '= delete' where the
compilation did not fail on windows.  Those that could NOT be set '= delete' were
Signature and FileHeader (there may be others). An example of the compiler error
is this below:

 D:\SourceCode\GitLab\ProjectSoftware\NFIMM_NIST\TheLibrary\NFIMM\src\lib\bmp\bmp.cpp(43): error C2280: 'NFIMM::BMP::Fil 
eHeader::FileHeader(void)': attempting to reference a deleted function [R:\nfimm\src\lib\NFIMM_ITL.vcxproj]

That is, in file bmp.h, the error above is from this code (below, added '= delete'):
    /** @brief Default constructor not meant for use; does nothing */
    FileHeader() = delete;

Also, removed all unimplemented copy constructors and Init() functions.

History of git pushes:
git cm -m "Set all default constructors that are not meant to be used as '= delete' where the compilation did not fail on windows.  Those that could not be set '= delete' were Signature and FileHeader (there may be others). Also, removed all unimplemented copy constructors and Init() functions."


bxb DONE (18Jul2023)
Was able to set FileHeader and InfoHeader default constructor to '= delete' by removing the
BMP::InfoHeader::InfoHeader() {} implementation from info_header.cpp -AND- by removing the
BMP::FileHeader::FileHeader() {} implementation from file_header.cpp.

History of git pushes:
git cm -m "Was able to set FileHeader and InfoHeader default constructor to '= delete'."


As an example, the code allows this:
	FileHeader fh();
	fh.read();
which will cause the dereference of an undefined pointer.
------------------------------------------------------------------------------------------------------------------------

The code would be easier to understand if you distinguished object members
from other variables; entireHeader, bfType as examples. This can be done by
using 'this->bfType' or using a naming convention, prefix member vars with
'_' for example.

bxb DONE (06Jul2023)
History of git pushes:
git cm -m "Prefix object member vars with '_'"
------------------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------------------

I would recommend that you replace the commented-out debug code with #ifdef
DEBUG statements. For commented-out logging code recommend you use #ifdef
EXTRALOG or similar. See png.cpp lines 441-451 and signature.cpp lines 63-77 as
examples.  For other commented-out code (png.cpp lines 303-308) you may want to
either delete that code OR add a comment stating why this code may be useful to
keep.

bxb DONE 06Jul23
Deleted from png.cpp in function PNG::processExistingChunks():
  // Test for invalid chunk type; don't forget to change 'i<_countChunk+2'
  //   in first for-loop.
  // ChunkLayout *badChunk = new ChunkLayout;
  // badChunk->typeBytes[0] = 'B';
  // badChunk->typeBytes[1] = 'B';
  // badChunk->typeBytes[2] = 'A';
  // badChunk->typeBytes[3] = 'D';
  // _srcChunkPointers[_countChunk+1] = *badChunk;

 -AND-

         // {
        //   std::string loggerStr{""};
        //   auto strAddr =
        //     "3:Chunk address: processExistingChunks: 0x%p";
        //   logAddress( strAddr, _srcChunkPointers[i], loggerStr );
        //   _params->log.push_back( loggerStr );
        // }

Deleted from png.cpp in function PNG::xferChunks()
  // {
  //   auto strAddr = "3:Chunk address: xferChunks, from source image: 0x%p";
  //   for( size_t p=0; p<_countChunk; p++ ) {
  //     std::string loggerStr{""};
  //     logAddress( strAddr, _srcChunkPointers[p], loggerStr );
  //     _params->
  //       log.push_back( "3:xferChunks, read: " +
  //                       _srcChunkPointers[p]->type() );
  //     _params->log.push_back( loggerStr );
  //   }
  // }


bxb DONE 06Jul23
Deleted from signature.cpp at end of function PNG::Signature::getSignature( int offset, uint8_t *srcImageBuffer ):
  // char hex[3];
  // std::string s{"Signature signa: 0x"};
  // for( int i=0; i<NUM_BYTES_SIGNATURE; i++ ) {
  //   sprintf( hex, "%02X", defined[i] );
  //   s.append( hex );
  // }
  // s.append("\0");
  // png->_params->log.push_back( s );
  // s = "Signature bytes: 0x";
  // for( int i=0; i<NUM_BYTES_SIGNATURE; i++ ) {
  //   sprintf( hex, "%02X", dataBytes[i] );
  //   s.append( hex );
  // }
  // s.append("\0");
  // png->_params->log.push_back( s );


bxb DONE 06Jul23
Deleted from png.cpp at end of function PNG::insertChunks():
  // for( uint32_t p=0; p<_countChunk; p++ ) {
  //   if( _srcChunkPointers[p]->type() == "pHYs" ) {
  //     _pHYsChunkExists = true;
  //     break;
  //   }
  // }

History of git pushes:
git cm -m "Remove all commented code that was unnecessary; also, keep some log pushes that were commented but add a comment to all cases that indicate why is better to keep."
------------------------------------------------------------------------------------------------------------------------







For object instantiation, the code sometimes uses initialization syntax ('{}'),
sometimes explicit default constructor ('()') and sometimes implicit default
constructor ('new foo;'). Consider changing to use initialization syntax or
explicit construction ('new foo(arg1, arg2)').

bxb DONE (18Jul2023)
History of git pushes:
git cm -m "Init all variables consistently, use initialization syntax."

-----------------------------------------------------------------------------

nfimm.{h, cpp}
---------------
MetadataParameters structs srcImg and destImg should be objects of another
type 'struct ImgMeta' or similar. However, because you don't have dimension
for dest image you'd have to handle that case. If you leave the two structs
then you should remove to commented-out code and commentary in struct destImg.

Implementation of ~NFIMM(), get_imgSampleRateUnits() and other functions
should be in nfimm.cpp

Functions set_srcImgSampleRateUnits() and set_destImgSampleRateUnits don't do
what the documentation says: They don't handle "inch" or "other" or random
strings.

There are two ways to represent units in the resolution struct: units and
unitsStr; are both necessary? Also, it's not clear what resolution.units
represent; it appears to be a flag set to 1 or 0, and the comment ("single byte 
horiz and vert units") doesn't describe what the value means. 

In general, instead of using strings to represent PPI, inch/meter, etc. it
would be cleaner to use enum class, but that's a significant code change.

-----------------------------------------------------------------------------
You should consider passing strings by reference and not value.
bxb DONE all strings addressed as const for input param (11Jul2023)
History of git pushes:
git cm -m "All strings addressed as const for input param; removed paramater 'names' from declared function signatures (declare only types); add function BMP::to_s_hex(); improve BMP logging xferBytesBetweenBuffers: count =XX."

-----------------------------------------------------------------------------
Why are s_imgStreamRead, s_imgStreamWrite and other members of the NFIMM
class declared static? Do you need a single, global instance of these items?
There's a design flaw here because NFIMM references the global single instance
s_imgBufferRead. Specifically, having s_imgBufferRead as static will cause
problems if two or more instances of NFIMM exist as the destructor deletes
s_imgBufferRead.

There's also a design quirk in that s_imgBufferRead is returned by the two
versions of readImageFileIntoBuffer(). However, s_imgBufferRead is global,
so clients of readImageFileIntoBuffer() do not need that pointer to be
returned.

The NFIMM copy constructor has an empty implementation, It would be better
to remove the copy constructor by declaring it "= delete". Otherwise an NFIMM
object could be copied, leading to the multiple deletions of s_imgBufferRead.
However, that means that you cannot return an NFIMM object from a function.

The better design is to have class NFIMM manage the image buffer as private
state data. Same comment for the other global variables. The image reading
functions should also be part of the class.

readImageFileIntoBuffer() and writeBufferIntoImageFile should check for
I/O errors.

The function expressUINT32AsUTCyear() doesn't deal with UTC explicitly; perhaps
a better name?

Functions expressUINT32AsUTCyear(), expressTwoBytesAsUINT16, and
expressUINT32AsFourBytes() each convert a value to big-endian. What happens if
the value is already big-endian? You may want to use the standard htons() and
htonl() functions.

The comment "BMP format uses little-endian. ..." doesn't mean anything in the
context of defining expressFourBytesAsUINT32() or expressTwoBytesAsUINT16().

bxb DONE replaced all NFIMM with nfimm (03Jul2023)


---------------------------------------------------------------------------
bmp.{h, cpp}
----------
These are not really useful:
  #define NUM_BYTES_4 4
  #define NUM_BYTES_2 2
If you want a constant representing a value of four, use 4.
bxb DONE replaced with 4 and 2 (07Jul2023)

In general, it's better to use const int instead of defines. However, C++
version 11 or greater is required to use 'const int FOO{16}'

bxb DONE replaced all #define with 'static const int' (07Jul2023)
The #define replacement was for both BMP and PNG header files.
Also, deleted the 'operator==' functions for both BMP file-header and info-header.

History of git pushes:
git cm -m "Replaced all #define with 'static const int' (multiple) and 'static const string' for version. Also, deleted the 'operator==' functions for both BMP file-header and info-header."


---------------------------------------------------------------------------


FileHeader( BMP * );
Is it expected that the FileHeader function will modify the BMP object? If
not, you may consider using const pointer to const for BMP*.

There's a design issue: The BMP constructor takes a pointer to a
MetadataParameters object and stores it in the BMP object's state. Later
a buffer is allocated off of the _params pointer. You have shared ownership
of the MetadataParameters object: The caller of the BMP constructor and the
BMP object itself. The responsibility of freeing MetadataParameters and
MetadataParameters::destImg::buffer is muddled. The use of a smart pointer to
wrap destImg.buffer could help but the MetadataParameters object's lifetime
is not well defined.


---------------------------------------------------------------------------

I recommend that you use smart pointers for allocating objects fileHeader,
infoHeader.
bxb DONE  (07Jul2023)

History of git pushes:
git cm -m "Use smart pointers for allocating objects fileHeader, infoHeader in function BMP::modify(); removed all associated references; was tested against 2000 source images; see config file config_win_bmp__pub_release__2000test.ini"
---------------------------------------------------------------------------

Modern C++ favors the use of std::vector(uint8_t) over allocating arrays
dynamically. This removes the need to delete[] the buffer. (You can use
std::unique_ptr<> instead but that is less fashionable).


---------------------------------------------------------------------------
BMP::r_cursor and BMP::w_cursor are initialized to 0 but afterwards it's not
clear how to reset those values. The comment for BMP::nextLengthBytes states
that r_cursor is initially set by the caller but that doesn't appear to be the
case. It would be a bad design to have the client of BMP:: functions need to
manipulate r_cursor and w_cursor. I suggest that you state that the design of
the BMP class is one that sets the buffer parsing to the start of the buffer
and all reads move the index into the buffer. If you want to provide the
ability to 'rewind' or 'fast-forward' then add functions to move the cursors.

I realize you may not want to change the BMP design as the function that
use the cursors are private, so the class is not meant to be used in a generic
BMP parsing sense. I would then suggest that you remove comments regarding
the cursors from the functions that manipulate them.

---------------------------------------------------------------------------

file_header.cpp
---------------
The @return comment for the read() function don't apply to that function.
In addition, the comments for read() do not describe what the function does.

FileHeader::operator==() function is mostly commented out and no checks are
actually done.  bxb DONE was deleted 07Jul23.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
info_header.cpp
---------------
InfoHeader::operator==() function is mostly commented out and no checks are
actually done. bxb DONE was deleted 07Jul23.

In addition, the comments for read() do not describe what the function does.

The @param and @return comments for the read() function don't apply to that
function.

bxb DONE (07Jul23)  fixed both file_header.cpp and info_header.cpp per the comments
History of git pushes:
git cm -m "Fix the read() function comments in both file_header.cpp and info_header.cpp."

---------------------------------------------------------------------------
---------------------------------------------------------------------------



png.{h, cpp}
phys.cpp
signature.cpp
----------
PNG::IhdrX has the same problem as mentioned above: Shared state data, the
png pointer in this case.
The declaration of _srcChunkPointers[1000] and _insertChunkPointers[10] seems
arbitrary; do the values 1000 and 10 mean anything? Are we guaranteed to never
run off the end of the array?

Classes Signature, IhdrX, Phys and Text appear to be essentially a set of
helper functions to parse PNG buffers. There is a strong coupling between
those classes and class PNG, making it hard to understand what the code is
modifying. Consider making those class functions part of the PNG class.
(The Signature class doesn't modify the PNG buffers as that code is
commented out).

I realize this would be a large change, and some state data is maintained in
those classes (Text::_countChunk for example), but it would be a better
design have have the PNG class manage its own data instead of using friend
classes to reach in and modify, thereby needing to know the implementation
details of PNG.

Line 200 of png.cpp allocates an object with 'new ChunkLayout'; It is better
to use 'new ChunkLayout()'.
ChunkLayout objects are allocated (png.cpp::parseAllChunks) A comment states
"With each chunk, save the pointer to the ChunkLayout object in an array." and
see that code (png.cpp:231) doing that.  However, it is not clear when the
currentChunk object (and objects it points to) are free'd.  The PNG::modify()
does delete[] but tracing the call to modify() is not easily done. In addition,
the objects pointed to by the ChunkLayout object are not all allocated within
a single code block. In particular, ChunkLayout::wholeChunkBuffer is allocated
within concat() which is defined in png.h. 

Several areas with png.cpp have local scoping; why? See lines 47-53 of png.cpp
as an example.

bxb DONE (18Jul2023)
History of git pushes:
git cm -m "Moved all method implementations from png.h to png.cpp; removed object instantiation _fileheader and _infoheader from bmp.h; removed local scoping and fixed other similar style-formatting."

---------------------------------------------------------------------------
crc_public_code.{h,cpp}
-----------------------
Because buildCRCtable() manages the crc_table_generated flag I suggest you make
that flag a static variable within buildCRCtable() and just immediately return
from that function if the flag is true.
bxb DONE (10Jul2023)
History of git pushes:
git cm -m "Improve build CRC table built only once using boolean 'check flag' as static variable in the buildCRCtable() function."

---------------------------------------------------------------------------
ihdr.cpp
---------
The comment for parseChunk() states "none of its bytes are modified" which is
true (_srcChunkPointers elements are not modifed) but other fields within the
friendly fields of the png object are.
bxb Note: 10Jul2023 - not sure what this means while it probably is true what
          Wayne is saying here, but I'm not making any changes to source code
          per this comment.

---------------------------------------------------------------------------
text.cpp
---------
Objects tchunk and tchunk->dataBuffer are not deleted in many of the error
paths. In the non-error path these objects must be deleted by methods in the
PNG class. This design creates a strong coupling between the Text and PNG
classes which would be hard to maintain. As mentioned above, can the functions
in the Text class be made members of the PNG class?

There is commented-out code (lines 139-140 for example) that should be
explained as to why that code is worth keeping.
bxb DONE: 10Jul2023 - lines deleted as these were implemented later in the same
          function Text::insertChunks().

On line 220 'cat' is allocated but never deleted. This occurs inside a loop so
multiple leaks are possible.
bxb DONE: 10Jul2023 - inserted 'delete [] cat;' after done with this temporary
                      array.

History of git pushes:
git cm -m "In text.cpp delete commented lines; delete [] cat after done with this temporary array; use new (std::nothrow) for tchunk and tchunk->dataBuffer, and if either ptr==0, throw Miscue."

